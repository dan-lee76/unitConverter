{"version":3,"sources":["components/unitOutput.jsx","components/unitInput.jsx","index.js"],"names":["Unit","state","unit","props","className","this","value","Component","Inputfield","length_units","unit_types","id","current_input_value","doHandleCalc","event","setState","target","input_value","i","length","toPrecision","doChangeUnit","console","log","getCurrentInput","type","placeholder","onChange","min","onKeyDown","evt","key","preventDefault","DropdownButton","title","map","unitId","Dropdown","Item","onSelect","eventKey","ReactDOM","render","document","getElementById"],"mappings":"8MAkBeA,E,4MAfXC,MAAQ,CACJC,KAAK,EAAKC,MAAMD,M,4CAEpB,WACI,OACI,qBAAKE,UAAU,qBAAf,SACI,sBAAKA,UAAU,cAAf,UACA,4BAAIC,KAAKJ,MAAMC,OACf,4BAAIG,KAAKF,MAAMG,iB,GATZC,a,gBCmFJC,E,4MAhFXP,MAAQ,CACJQ,aAAa,CACT,WAAa,IACb,WAAa,GACb,MAAQ,IACR,UAAY,IACZ,KAAO,KACP,KAAO,MACP,KAAO,IACP,KAAO,QAEXP,KAAK,OACLQ,WAAW,CACP,CAACC,GAAG,OAAQL,MAAM,GAClB,CAACK,GAAG,OAAQL,MAAM,GAClB,CAACK,GAAG,OAAQL,MAAM,GAClB,CAACK,GAAG,OAAQL,MAAM,GAClB,CAACK,GAAG,aAAcL,MAAM,GACxB,CAACK,GAAG,aAAcL,MAAM,GACxB,CAACK,GAAG,QAASL,MAAM,GACnB,CAACK,GAAG,YAAYL,MAAM,IAE1BM,oBAAoB,G,EAcxBC,aAAe,SAAAC,GACX,EAAKC,SAAS,CAACH,oBAAoBE,EAAME,OAAOV,QAGhD,IAFA,IAAMI,EAAa,EAAKT,MAAMS,WACxBO,EAAcH,EAAME,OAAOV,MACzBY,EAAE,EAAGA,EAAE,EAAKjB,MAAMS,WAAWS,OAAQD,IAEzCR,EAAWQ,GAAGZ,OAAQW,EAAY,EAAKhB,MAAMQ,aAAa,EAAKR,MAAMC,MAAO,EAAKD,MAAMQ,aAAa,EAAKR,MAAMS,WAAWQ,GAAGP,KAAKS,YAAY,GAC9I,EAAKL,SAAS,CAAEL,gB,EAIxBW,aAAe,SAAAP,GACXQ,QAAQC,IAAI,EAAKtB,MAAMC,MACvB,EAAKa,SAAS,CAACb,KAAKY,IACpB,EAAKU,gBAAgBV,I,qDA1BzB,SAAgBZ,GAIZ,IAFA,IAAMQ,EAAaL,KAAKJ,MAAMS,WACxBO,EAAcZ,KAAKJ,MAAMW,oBACvBM,EAAE,EAAGA,EAAEb,KAAKJ,MAAMS,WAAWS,OAAQD,IAEzCR,EAAWQ,GAAGZ,OAAQW,EAAYZ,KAAKJ,MAAMQ,aAAaP,GAAOG,KAAKJ,MAAMQ,aAAaJ,KAAKJ,MAAMS,WAAWQ,GAAGP,KAAKS,YAAY,GACnIf,KAAKU,SAAS,CAAEL,iB,oBAsBxB,WAAU,IAAD,OACL,OACI,gCACI,sBAAKN,UAAU,oBAAf,UACA,uBAAOA,UAAU,aACjBqB,KAAK,SACLC,YAAY,cACZC,SAAUtB,KAAKQ,aACfe,IAAI,IACJC,UAAY,SAACC,GAAD,MAAsB,MAAZA,EAAIC,KAAgBD,EAAIE,kBAAkC,MAAZF,EAAIC,KAAgBD,EAAIE,kBAAkC,MAAZF,EAAIC,KAAgBD,EAAIE,oBAE1I,cAACC,EAAA,EAAD,CAAgBC,MAAO7B,KAAKJ,MAAMC,KAAlC,SACKG,KAAKJ,MAAMS,WAAWyB,KAAI,SAAAC,GAAM,OAAI,cAACC,EAAA,EAASC,KAAV,CAAeC,SAAU,EAAKlB,aAAcmB,SAAUJ,EAAOzB,GAA7D,SAAkEyB,EAAOzB,aAGlH,qBAAKP,UAAU,SAAf,SACA,qBAAKA,UAAU,uBAAf,SACCC,KAAKJ,MAAMS,WAAWyB,KAAI,SAAAjC,GAAI,OAAI,cAAC,EAAD,CAAoBA,KAAMA,EAAKS,GAAIL,MAAOJ,EAAKI,OAApCJ,EAAKS,kB,GAvE1CJ,a,YCIzBkC,IAASC,OAAO,cAAC,EAAD,IAAeC,SAASC,eAAe,W","file":"static/js/main.c61ad815.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Unit extends Component {\r\n    state = { \r\n        unit:this.props.unit,\r\n     }\r\n    render() { \r\n        return ( \r\n            <div className=\"unitDisplayWrapper\">\r\n                <div className=\"unitDisplay\">\r\n                <p>{this.state.unit}</p>\r\n                <p>{this.props.value}</p>\r\n                </div>\r\n            </div>\r\n            );\r\n    }\r\n}\r\n \r\nexport default Unit;","import React, { Component } from 'react';\r\nimport Unit from './unitOutput'\r\nimport { Dropdown, DropdownButton } from 'react-bootstrap';\r\n//convert everything to mm\r\nclass Inputfield extends Component {\r\n    state = {  \r\n        length_units:{\r\n            \"Millimetre\":999,\r\n            \"Centimeter\":10,\r\n            \"Meter\":1000,\r\n            \"Kilometre\":1e+6,\r\n            \"Inch\":25.4,\r\n            \"Feet\":304.8,\r\n            \"Yard\":914,\r\n            \"Mile\":1.609e+6\r\n        },\r\n        unit:\"Feet\",\r\n        unit_types:[\r\n            {id:\"Inch\", value:0},\r\n            {id:\"Feet\", value:0},\r\n            {id:\"Yard\", value:0},\r\n            {id:\"Mile\", value:0},\r\n            {id:\"Millimetre\", value:0},\r\n            {id:\"Centimeter\", value:0},\r\n            {id:\"Meter\", value:0},\r\n            {id:\"Kilometre\",value:0}\r\n        ],\r\n        current_input_value:0\r\n    };\r\n    getCurrentInput(unit){\r\n        \r\n        const unit_types = this.state.unit_types;\r\n        const input_value = this.state.current_input_value;\r\n        for(var i=0; i<this.state.unit_types.length; i++){\r\n            //console.log(this.state.unit,i, input_value,this.state.length_units[this.state.unit],this.state.length_units[this.state.unit_types[i].id]);\r\n            unit_types[i].value=((input_value*this.state.length_units[unit])/this.state.length_units[this.state.unit_types[i].id]).toPrecision(6);\r\n            this.setState({ unit_types });\r\n        }\r\n\r\n    }\r\n    \r\n    doHandleCalc = event => {\r\n        this.setState({current_input_value:event.target.value});\r\n        const unit_types = this.state.unit_types;\r\n        const input_value = event.target.value;\r\n        for(var i=0; i<this.state.unit_types.length; i++){\r\n            //console.log(this.state.unit,i, input_value,this.state.length_units[this.state.unit],this.state.length_units[this.state.unit_types[i].id]);\r\n            unit_types[i].value=((input_value*this.state.length_units[this.state.unit])/this.state.length_units[this.state.unit_types[i].id]).toPrecision(6);\r\n            this.setState({ unit_types });\r\n    \r\n        }\r\n    }\r\n    doChangeUnit = event =>{\r\n        console.log(this.state.unit);\r\n        this.setState({unit:event});\r\n        this.getCurrentInput(event);\r\n    }\r\n\r\n    render() { \r\n        return ( \r\n            <div>\r\n                <div className=\"inputFieldWrapper\">\r\n                <input className=\"inputField\" \r\n                type=\"number\"\r\n                placeholder=\"Measurement\"\r\n                onChange={this.doHandleCalc}\r\n                min=\"0\"\r\n                onKeyDown={ (evt) => (evt.key === 'e'  && evt.preventDefault()) || (evt.key === '+'  && evt.preventDefault()) || (evt.key === '-'  && evt.preventDefault())}\r\n                />\r\n                <DropdownButton title={this.state.unit}>\r\n                    {this.state.unit_types.map(unitId => <Dropdown.Item onSelect={this.doChangeUnit} eventKey={unitId.id}>{unitId.id}</Dropdown.Item>)}\r\n                </DropdownButton>\r\n                </div>\r\n                <div className=\"result\">\r\n                <div className=\"conversionResultArea\">\r\n                {this.state.unit_types.map(unit => <Unit key={unit.id} unit={unit.id} value={unit.value}/>)}\r\n                </div>\r\n                </div>\r\n            </div>\r\n         );\r\n    }\r\n\r\n    \r\n}\r\n \r\nexport default Inputfield;\r\n\r\n//<input id=\"value\" type=\"number\" placeholder=\"Measurement\" oninput=\"calc(this.value)\" onchange=\"calc(this.value)\">","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n//import Counter from './components/counter';\r\n//import Unit from './components/unitOutput'\r\nimport Inputfield from \"./components/unitInput\"\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\n//ReactDOM.render(<Counter />,document.getElementById('root'));\r\nReactDOM.render(<Inputfield/>, document.getElementById('root'));\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}